<?xml version="1.0" encoding="utf-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" version="3.0">
	<display-name>simpledatacenter</display-name>

	<!-- 加载spring容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/classes/spring/applicationContext-*.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- springmvc前端控制器 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml） -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析 
			第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析 
			使用此种方式可以实现 RESTful风格的url 
			第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时， 仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。 -->
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	
	
	<!-- springmvc前端控制器，rest配置 -->
	<!-- <servlet>
		<servlet-name>springmvc_rest</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml（springmvc-servlet.xml）
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc_rest</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
 -->

 	<!-- shiro 安全过滤器 -->
    <filter>
        <filter-name>shiroSecurityFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    
    <filter-mapping>
        <filter-name>shiroSecurityFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
    
   <filter>
    	<filter-name>searchDataFilter</filter-name>
    	<filter-class>com.good.plat.datacenter.common.filter.SearchDataFilter</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>searchDataFilter</filter-name>
    	<url-pattern>/index/*</url-pattern>
    	<url-pattern>/players/*</url-pattern>
    	<url-pattern>/revenue/*</url-pattern>
    	<url-pattern>/virtual/*</url-pattern>
    	<url-pattern>/whales/*</url-pattern>
    </filter-mapping>
    
    <!-- <filter>
    	<filter-name>ResponseHeaderFilter</filter-name>
    	<filter-class>com.good.plat.datacenter.common.filter.ResponseHeaderFilter</filter-class>
    </filter>
    <filter-mapping>
    	<filter-name>ResponseHeaderFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping> -->
 	
	<!-- post乱码过虑器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
    <!-- 配置log4j配置文件路径 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    <!-- 60s 检测日志配置 文件变化 -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>

    <!-- 配置Log4j监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    
    <servlet>
      	<servlet-name>DruidStatView</servlet-name>
      	<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
  	</servlet>
  	<servlet-mapping>
      	<servlet-name>DruidStatView</servlet-name>
      	<url-pattern>/druid/*</url-pattern>
  	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>/login.html</welcome-file>
	</welcome-file-list>
	
    <mime-mapping>
        <extension>xls</extension>
        <mime-type>application/vnd.ms-excel</mime-type>
    </mime-mapping>
     <!-- 设置session的作用时间  (分钟)-->
    <session-config>
		    <session-timeout>60</session-timeout>
	</session-config>
    
    <!-- <error-page>
    	<error-code>500</error-code>
    	<location>/allerror.jsp</location>
    </error-page>
    
    <error-page>
    	<error-code>404</error-code>
    	<location>/allerror.jsp</location>
    </error-page>
    
    <error-page>
    	<error-code>502</error-code>
    	<location>/allerror.jsp</location>
    </error-page> -->
    
</web-app>