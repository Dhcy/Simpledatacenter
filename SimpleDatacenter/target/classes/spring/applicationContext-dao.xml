<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	<!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 -->
	<context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true" />
	<!-- 配置数据源 ，dbcp -->
	
	<!-- 加载redis参数 -->
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true" />
	
  	<!-- redis -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <!-- <property name="maxActive" value="${redis.maxActive}" />   -->
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <!-- <property name="maxWait" value="${redis.maxWait}" /> -->  
    </bean>
  
    <!-- spring data redis -->  
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="usePool" value="true"></property>  
        <property name="hostName" value="${redis.host}" />  
        <property name="port" value="${redis.port}" />  
        <!-- <property name="password" value="${redis.pass}" /> -->  
        <property name="timeout" value="${redis.timeout}" />  
        <property name="database" value="${redis.default.db}"></property>  
        <constructor-arg index="0" ref="jedisPoolConfig" />
    </bean>  
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory"   ref="jedisConnectionFactory" />  
    </bean>  

	<!-- druid连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
        <property name="url" value="${mysql.url}"/>
        <property name="username" value="${mysql.username}"/>
        <property name="password" value="${mysql.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${ds.initialSize}"/>
        <property name="minIdle" value="${ds.minIdle}"/>
        <property name="maxActive" value="${ds.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${ds.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
	</bean>
	
	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
	</bean>
	
	<!-- mapper扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->
		<property name="basePackage" value="com.good.plat.datacenter.sys.mapper.log,com.good.plat.datacenter.login.user.mapper,
			com.good.plat.datacenter.game.mapper,
			com.good.plat.datacenter.datastat.mapper.index,
			com.good.plat.datacenter.datastat.mapper.players,
			com.good.plat.datacenter.datastat.mapper.levels,
			com.good.plat.datacenter.datastat.mapper.revenue,
			com.good.plat.datacenter.datastat.mapper.virtual,
			com.good.plat.datacenter.datastat.mapper.whales,
			com.good.plat.datacenter.datastat.mapper.channels,
			com.good.plat.datacenter.datastat.mapper.gift,
			com.good.plat.datacenter.datastat.mapper.version,
			com.good.plat.datacenter.datastat.mapper.concurrent,
			com.good.plat.datacenter.datastat.mapper.analysis,
			com.good.plat.datacenter.datastat.mapper.buyplat,
			com.good.plat.datacenter.datastat.mapper.balanceplat,
			com.good.plat.datacenter.datastat.mapper.sdkdata,
			com.good.plat.datacenter.independ.mapper,
			com.good.plat.datacenter.datastat.mapper.project,
			com.good.plat.datacenter.datastat.mapper.appsflyer,
			com.good.plat.datacenter.datastat.mapper.xgfinance,
			com.good.plat.datacenter.datastat.mapper.realtimedata,
			com.good.plat.datacenter.datastat.mapper.financedata
			">
		</property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 事务管理器 -->
	<bean id="txManager"
	  class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
	    <property name="dataSource" ref="dataSource" /> 
	</bean> 
  
	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->
	<tx:annotation-driven transaction-manager="txManager" /> 

</beans>